networks:
  my_network:
    driver: bridge

services:
  postgres_db:
    image: postgres:16
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_password
      POSTGRES_DB: ecommerce_db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ecommerce_user", "-d", "ecommerce_db"]
      interval: 5s
      timeout: 5s
      retries: 4
    networks:
      - my_network
    restart: always

  django_web:
    build:
      context: .
    container_name: django_web
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - /ecommerce/.env
    depends_on:
      postgres_db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
            sleep 10 &&
            python manage.py loaddata ./data/data.json &&
            python manage.py collectstatic --noinput &&
            echo 'You can access the application at http://localhost:8000' &&
            gunicorn ecommerce.wsgi:application --bind 0.0.0.0:8000 --workers $(python -c 'import multiprocessing as mp; print((2 * mp.cpu_count()) + 1)') --timeout 30"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://127.0.0.1:8000"]
    #   interval: 20s
    #   timeout: 5s
    #   retries: 3
    networks:
      - my_network
    restart: always

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    # depends_on:
    #   django_web:
    #     condition: service_healthy
    networks:
      - my_network
    restart: always

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     - django_web
  #   networks:
  #     - my_network
